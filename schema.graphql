enum Position {
  Bull
  Bear
  House
}

# Custom Entities

type Market @entity {
  id: ID!

  address: Bytes!
  epoch: BigInt!
  paused: Boolean!

  owner: String!
  operator: String!

  totalUsers: BigInt!
  totalBets: BigInt!
  totalBetsBull: BigInt!
  totalBetsBear: BigInt!
  totalAmount: BigDecimal!
  totalBullAmount: BigDecimal!
  totalBearAmount: BigDecimal!

  rounds: [Round!] @derivedFrom(field: "market")
  bets: [Bet!] @derivedFrom(field: "market")

  minBetAmount: BigInt

  genesisStartTime: BigInt!
}

type Round @entity {
  id: ID!
  market: Market!

  timeframeId: Int!
  epoch: BigInt!
  position: Position
  failed: Boolean

  previous: Round

  # Start
  startAt: BigInt
  startBlock: BigInt
  startHash: Bytes

  # Lock
  lockAt: BigInt
  lockBlock: BigInt
  lockHash: Bytes
  lockPrice: BigDecimal

  # End
  endAt: BigInt
  endBlock: BigInt
  endHash: Bytes
  closePrice: BigDecimal # endPrice
  # Bets
  totalBets: BigInt!
  totalAmount: BigDecimal!
  totalAmountTreasury: BigDecimal
  bullBets: BigInt!
  bullAmount: BigDecimal!
  bearBets: BigInt!
  bearAmount: BigDecimal!
  bets: [Bet!]! @derivedFrom(field: "round")

  # For sort
  estimatedStartTime: BigInt!
  estimatedLockTime: BigInt!
  estimatedEndTime: BigInt!
}

type Payout @entity {
  id: ID!
  market: Bytes!
  user: User!
  amount: BigDecimal!
}

type TotalBet @entity {
  id: ID!
  market: Bytes!
  user: User!
  count: BigInt!
  amount: BigDecimal!
  timeframeId: Int!
}

type WinBet @entity {
  id: ID!
  market: Bytes!
  user: User!
  count: BigInt!
  amount: BigDecimal!
}

type User @entity {
  id: ID!

  # Address
  address: Bytes!
  address_string: String!

  createdAt: BigInt!
  updatedAt: BigInt!

  # Block
  block: BigInt!

  # Bets
  totalBets: [TotalBet!] @derivedFrom(field: "user")
  winBets: [WinBet!] @derivedFrom(field: "user")

  payouts: [Payout!] @derivedFrom(field: "user")
  bets: [Bet!]! @derivedFrom(field: "user")

  wholeBetAmount: BigDecimal!
  wholePayoutAmount: BigDecimal!

  invest: BigDecimal!
  balance: BigDecimal!

  profit_lose: BigDecimal!
  roi: BigDecimal!
}

type Bet @entity {
  id: ID!

  # market address
  market: Market!
  # epoch
  round: Round!
  #timeframe
  timeframeId: Int!

  user: User!
  hash: Bytes!

  amount: BigDecimal!
  position: Position!
  claimed: Boolean!
  claimedAmount: BigDecimal
  claimedHash: Bytes

  createdAt: BigInt!
  updatedAt: BigInt!

  # Block
  block: BigInt!

  isReverted: Boolean!
  creditUsed: Boolean!
}

type Vault @entity {
  id: ID!
  address: Bytes!
  market: Market
  underlyingToken: Bytes!
  decimals: Int!
  vaultId: BigInt

  totalShares: BigDecimal!
  totalStakedAmount: BigDecimal!
  totalInvestedAmount: BigDecimal!
  tokenIds: [BigInt!]!

  feeAccrued: BigDecimal!
  adminAddress: Bytes
  config: Bytes
  name: String
  symbol: String!

  snapshots: [VaultSnapshot!] @derivedFrom(field: "vault")
  vaultActivities: [VaultActivity!] @derivedFrom(field: "vault")
}

enum WithdrawalState {
  PENDING
  RELEASED
  CANCELED
}

type VaultSnapshot @entity {
  id: ID!
  vault: Vault!
  timestamp: BigInt!
  totalStakedAmount: BigDecimal!
  totalShares: BigDecimal!
  totalInvestedAmount: BigDecimal
  managementFee: BigDecimal
}

type Withdrawal @entity {
  id: ID!
  vault: Vault!
  tokenId: BigInt!
  shareAmount: BigDecimal!
  startTime: BigInt!
  feeAmount: BigDecimal!

  state: WithdrawalState
}

type VaultPosition @entity {
  id: ID!
  vault: Vault!
  tokenId: BigInt!
  owner: Bytes!
  investAmount: BigDecimal!
  shareAmount: BigDecimal!
  withdrawal: Withdrawal
  timestamp: BigInt!
}

type VaultActivity @entity {
  id: ID!
  vault: Vault!
  account: Bytes!
  amount: BigDecimal!
  timestamp: BigInt!
  type: String!
}
